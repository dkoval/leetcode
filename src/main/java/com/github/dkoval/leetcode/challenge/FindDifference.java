package com.github.dkoval.leetcode.challenge;

import org.jetbrains.annotations.NotNull;

/**
 * <a href="https://leetcode.com/problems/find-the-difference/">Find the Difference</a>
 * <p>
 * You are given two strings s and t.
 * <p>
 * String t is generated by random shuffling string s and then add one more letter at a random position.
 * <p>
 * Return the letter that was added to t.
 * <p>
 * Constraints:
 * <ul>
 *  <li>0 <= s.length <= 1000</li>
 *  <li>t.length == s.length + 1</li>
 *  <li>s and t consist of lowercase English letters</li>
 * </ul>
 */
public interface FindDifference {

    char findTheDifference(String s, String t);

    // O(N) time | O(alpha) space, where alpha = 26 is the size of the alphabet
    class FindDifferenceUsingCountsRev1Java implements FindDifference {

        @Override
        public char findTheDifference(@NotNull String s, @NotNull String t) {
            int[] counts = new int[26];
            for (int i = 0; i < s.length(); i++) {
                counts[s.charAt(i) - 'a']++;
            }

            for (int i = 0; i < t.length(); i++) {
                if (--counts[t.charAt(i) - 'a'] < 0) {
                    return t.charAt(i);
                }
            }
            return '#';
        }
    }

    // O(N) time | O(ALPHA) space, where ALPHA = 26 is the size of the alphabet
    class FindDifferenceUsingCountsRev2Java implements FindDifference {

        @Override
        public char findTheDifference(String s, String t) {
            if (s.isEmpty()) {
                return t.charAt(0);
            }

            int n = s.length();

            int[] counts = new int[26];
            for (int i = 0; i < n; i++) {
                counts[s.charAt(i) - 'a']++;
                counts[t.charAt(i) - 'a']--;
            }

            // t.length == s.length + 1
            counts[t.charAt(n) - 'a']--;
            for (int i = 0; i < 26; i++) {
                if (counts[i] < 0) {
                    return (char)('a' + i);
                }
            }
            return '#';
        }
    }

    // Time complexity: O(N), space complexity: O(1)
    class FindDifferenceUsingSumJava implements FindDifference {

        @Override
        public char findTheDifference(String s, String t) {
            int n = s.length();

            int diff = 0; // ASCII value
            for (int i = 0; i < n; i++) {
                diff += t.charAt(i);
                diff -= s.charAt(i);
            }

            // t.length == s.length + 1
            diff += t.charAt(n);
            return (char) diff;
        }
    }

    // Time complexity: O(N), space complexity: O(1)
    class FindDifferenceUsingXorJava implements FindDifference {

        // Resource: https://www.youtube.com/watch?v=sRwElQ_TOr8&t=266s
        @Override
        public char findTheDifference(String s, String t) {
            char addedChar = 0;
            for (int i = 0; i < s.length(); i++) addedChar ^= s.charAt(i);
            for (int i = 0; i < t.length(); i++) addedChar ^= t.charAt(i);
            return addedChar;
        }
    }
}
